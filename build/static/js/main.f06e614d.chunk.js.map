{"version":3,"sources":["sortingAlg/sortingAlg.js","SortingVisualizer/SortingVisualizer.jsx","reportWebVitals.js","index.js"],"names":["mergeSort","array","animations","length","auxArray","slice","mergeSortHelper","mainArray","start","end","middle","Math","floor","k","i","j","animation","comparison","swap","push","doMerge","SortingVisualizer","prop","state","this","resetArray","min","max","random","setState","className","style","backgroundColor","color","onClick","e","map","value","idx","height","sortingAlg","newAnimations","bar","document","getElementsByClassName","barOne","barTwo","barOneStyle","barTwoStyle","setTimeout","newHeight","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f06e614d.chunk.js","sourcesContent":["export function mergeSort(array){\r\n    const animations = [];\r\n    \r\n    if(array.length <= 1) return array;\r\n    const auxArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxArray, animations);\r\n    return animations;\r\n};\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    start,\r\n    end,\r\n    auxArray,\r\n    animations,\r\n){\r\n    if(start === end) return;\r\n    const middle = Math.floor((start + end)/2);\r\n    mergeSortHelper(auxArray, start, middle, mainArray, animations);\r\n    mergeSortHelper(auxArray, middle + 1, end, mainArray, animations);\r\n    doMerge(mainArray, start, middle, end, auxArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    start,\r\n    middle,\r\n    end,\r\n    auxArray,\r\n    animations\r\n){\r\n    let k = start, i = start, j = middle + 1;\r\n    while(i <= middle && j <= end){\r\n        const animation = [];\r\n        animation.comparison = [i, j];\r\n        if(auxArray[i] <= auxArray[j]){\r\n            animation.swap = [k, auxArray[i]];\r\n            mainArray[k++] = auxArray[i++];           \r\n        }\r\n        else{\r\n            animation.swap = [k, auxArray[j]];\r\n            mainArray[k++] = auxArray[j++];           \r\n        }\r\n        animations.push(animation);\r\n    }\r\n    while(i <= middle){\r\n        animations.push({\r\n            comparison: [i, i],\r\n            swap: [k, auxArray[i]],\r\n        })\r\n        mainArray[k++] = auxArray[i++];\r\n    }\r\n    while(j <= end){\r\n        animations.push({\r\n            comparison: [j, j],\r\n            swap: [k, auxArray[j]],\r\n        })\r\n        mainArray[k++] = auxArray[j++];\r\n    }\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport * as sortingAlg from '../sortingAlg/sortingAlg';\r\n\r\nclass SortingVisualizer extends React.Component{\r\n    constructor(prop){\r\n        super(prop);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        for(let i = 0; i < 100; i++){\r\n            array.push(randomInt(5, 500));\r\n        }\r\n        this.setState({array});\r\n    }\r\n    \r\n    render(){\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <>\r\n            <div className=\"menu\">\r\n                <button className=\"btn\" style={{backgroundColor: \"black\", color: \"white\"}} onClick={() => this.resetArray()}>New array</button>            \r\n                <button className=\"btn\" onClick={() => this.resetArray()}>Quick Sort</button>            \r\n                <button className=\"btn\" onClick={(e) => this.mergeSort(e)}>Merge Sort</button>            \r\n                <button className=\"btn\" onClick={() => this.resetArray()}>Heap Sort</button>            \r\n                <button className=\"btn\" onClick={() => this.resetArray()}>Bubble Sort</button>            \r\n            </div>\r\n            <div className=\"container\">\r\n                {array.map((value, idx) => (\r\n                    <div key={idx} className=\"bar\" style={{height: `${value}px`}}></div>\r\n                ))}\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    mergeSort(){\r\n        const animations = sortingAlg.mergeSort(this.state.array);\r\n        const newAnimations = [];\r\n        for(const animation of animations){\r\n            newAnimations.push(animation.comparison);\r\n            newAnimations.push(animation.comparison);\r\n            newAnimations.push(animation.swap);\r\n        }\r\n        for(let i = 0; i < newAnimations.length; i++){\r\n            const bar = document.getElementsByClassName('bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if(isColorChange){\r\n                const color = i % 3 === 0 ? \"red\" : \"blue\";\r\n                const {barOne, barTwo} = newAnimations[i];\r\n                const barOneStyle = bar[barOne].style;\r\n                const barTwoStyle = bar[barTwo].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;                    \r\n                }, i * 5);\r\n            }\r\n            else{\r\n                setTimeout(() => {\r\n                    const [barOne, newHeight] = newAnimations[i];\r\n                    const barOneStyle = bar[barOne].style;\r\n                    barOneStyle.height = `${newHeight}`;\r\n                }, i * 5);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    \r\n}\r\n\r\nfunction randomInt(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SortingVisualizer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}